package Ch_1_5_Case_Study_Union_Find;

public class __UF_QuickUnion extends __UF {
	public __UF_QuickUnion(int N) { super(N); }
	public int find(int p) {
		while (p != id[p]) p = id[p];
		return p;
	}
	public boolean connected(int p, int q) { return find(p) == find(q); }
	public void union(int p, int q) {
		int pRoot = find(p);
		int qRoot = find(q);
		if (pRoot == qRoot) return;
		id[pRoot] = qRoot;
		count--;
	}
	public int maxTreeDepth() {
		int depth = 0;
		for (int i = 0; i < id.length; i++) {
			int tmp = 0, p = i;
			while (p != id[p]) {
				p = id[p];
				tmp++;
			}
			if (tmp > depth) depth = tmp;
		}
		return depth;
	}
	public static void main(String[] args) {
		int N = 10, pairCount = 20;
		__UF.test(new __UF_QuickUnion(N), N, pairCount);
	}
	// output
	/*
	 * 	--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 2 3 4 5 6 7 8 9       连通分量 : 10
		--------------------------------
		
		连接 7 6
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 2 3 4 5 6 6 8 9       连通分量 : 9
		--------------------------------
		
		连接 5 4
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 2 3 4 4 6 6 8 9       连通分量 : 8
		--------------------------------
		
		连接 8 2
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 2 3 4 4 6 6 2 9       连通分量 : 7
		--------------------------------
		
		连接 5 2
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 2 3 2 4 6 6 2 9       连通分量 : 6
		--------------------------------
		
		连接 5 3
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 3 3 2 4 6 6 2 9       连通分量 : 5
		--------------------------------
		
		8  5 已连通
		连接 5 7
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 3 6 2 4 6 6 2 9       连通分量 : 4
		--------------------------------
		
		7  8 已连通
		5  6 已连通
		连接 9 0
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 3 6 2 4 6 6 2 0       连通分量 : 3
		--------------------------------
		
		5  3 已连通
		7  8 已连通
		2  7 已连通
		4  2 已连通
		2  5 已连通
		7  4 已连通
		连接 4 9
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 1 3 6 2 4 0 6 2 0       连通分量 : 2
		--------------------------------
		
		9  8 已连通
		连接 1 9
		--------------------------------
		索引 :	0 1 2 3 4 5 6 7 8 9 
				0 0 3 6 2 4 0 6 2 0       连通分量 : 1
		--------------------------------
		
		7  8 已连通
		最大树高度 : 5

	 */
}