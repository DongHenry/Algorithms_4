package 第三章_二叉查找树;

public class Practise_3_2_04 {
    public static void main(String[] args) {
        /*
         * 查找的过程是，从某个结点出发，先用目标键和当前函数栈帧中的参数的结点键比较
         * 如果相等，那么返回当前结点，如果目标键小于当前的参数结点键，那么递归调用自身，并把当前参数结点的左孩子
         * 传下去，否则就把当前参数结点的右孩子传下去，递归基是如果结点为空，说明没找到
         * 
         * 对于序列 a : 这是一棵按照 10 9 8 7 6 5 ... 顺序插入的树，检查序列是可能的
         * 对于序列 b : 当检查到 5 时递归调用就开始在此处逐层返回，因此不可能还检查一下3
         * 对于序列 c : 这是一棵按照 1 10 2 9 3 8 4 7 6 5 顺序插入的树，检查序列是可能的
         * 对于序列 d : 这个序列是不可能的，在检查7后，转向7的左子树，因此往后检查的所有元素，必定都要小于7，然而序列中出现了8
         * 对于序列 e : 这是一棵按照 1 2 10 4 8 5 ... 顺序插入的树，检查序列是可能的
         */
    }
}
